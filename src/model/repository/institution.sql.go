// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: institution.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createInstitution = `-- name: CreateInstitution :one
insert into "institutions" (
  institution_type,
  name,
  phone,
  zip_code,
  street,
  number,
  neighborhood,
  city,
  state,
  UF,
  country,
  country_code
) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) 
returning institution_id
`

type CreateInstitutionParams struct {
	InstitutionType string         `json:"institution_type"`
	Name            string         `json:"name"`
	Phone           sql.NullString `json:"phone"`
	ZipCode         sql.NullString `json:"zip_code"`
	Street          sql.NullString `json:"street"`
	Number          sql.NullString `json:"number"`
	Neighborhood    sql.NullString `json:"neighborhood"`
	City            sql.NullString `json:"city"`
	State           sql.NullString `json:"state"`
	Uf              sql.NullString `json:"uf"`
	Country         sql.NullString `json:"country"`
	CountryCode     sql.NullString `json:"country_code"`
}

func (q *Queries) CreateInstitution(ctx context.Context, arg CreateInstitutionParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createInstitution,
		arg.InstitutionType,
		arg.Name,
		arg.Phone,
		arg.ZipCode,
		arg.Street,
		arg.Number,
		arg.Neighborhood,
		arg.City,
		arg.State,
		arg.Uf,
		arg.Country,
		arg.CountryCode,
	)
	var institution_id uuid.UUID
	err := row.Scan(&institution_id)
	return institution_id, err
}

const getInstitutionByID = `-- name: GetInstitutionByID :one
select (
  institution_id,
  institution_type,
  name,
  phone,
  zip_code,
  street,
  number,
  city,
  neighborhood,
  state,
  UF,
  country,
  country_code
) from "institutions"
where institution_id = $1 limit 1
`

func (q *Queries) GetInstitutionByID(ctx context.Context, institutionID uuid.UUID) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getInstitutionByID, institutionID)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}

const getInstitutionByName = `-- name: GetInstitutionByName :many
select (
  institution_id,
  institution_type,
  name,
  phone,
  zip_code,
  street,
  number,
  city,
  neighborhood,
  state,
  UF,
  country,
  country_code
) from "institutions"
where name like $1
`

func (q *Queries) GetInstitutionByName(ctx context.Context, name string) ([]interface{}, error) {
	rows, err := q.db.QueryContext(ctx, getInstitutionByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []interface{}{}
	for rows.Next() {
		var column_1 interface{}
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInstitution = `-- name: UpdateInstitution :one
update "institutions"
set institution_type = $1, 
    name = $2, 
    phone = $3,
    zip_code = $4,
    street = $5,
    number = $6,
    city = $7,
    neighborhood = $8,
    state = $9,
    UF = $10,
    country = $11,
    country_code = $12
where institution_id = $13 returning institution_id, institution_type, name, phone, zip_code, street, number, neighborhood, city, state, uf, country, country_code, is_active, created_at
`

type UpdateInstitutionParams struct {
	InstitutionType string         `json:"institution_type"`
	Name            string         `json:"name"`
	Phone           sql.NullString `json:"phone"`
	ZipCode         sql.NullString `json:"zip_code"`
	Street          sql.NullString `json:"street"`
	Number          sql.NullString `json:"number"`
	City            sql.NullString `json:"city"`
	Neighborhood    sql.NullString `json:"neighborhood"`
	State           sql.NullString `json:"state"`
	Uf              sql.NullString `json:"uf"`
	Country         sql.NullString `json:"country"`
	CountryCode     sql.NullString `json:"country_code"`
	InstitutionID   uuid.UUID      `json:"institution_id"`
}

func (q *Queries) UpdateInstitution(ctx context.Context, arg UpdateInstitutionParams) (Institution, error) {
	row := q.db.QueryRowContext(ctx, updateInstitution,
		arg.InstitutionType,
		arg.Name,
		arg.Phone,
		arg.ZipCode,
		arg.Street,
		arg.Number,
		arg.City,
		arg.Neighborhood,
		arg.State,
		arg.Uf,
		arg.Country,
		arg.CountryCode,
		arg.InstitutionID,
	)
	var i Institution
	err := row.Scan(
		&i.InstitutionID,
		&i.InstitutionType,
		&i.Name,
		&i.Phone,
		&i.ZipCode,
		&i.Street,
		&i.Number,
		&i.Neighborhood,
		&i.City,
		&i.State,
		&i.Uf,
		&i.Country,
		&i.CountryCode,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}
