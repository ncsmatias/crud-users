// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: professor.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createProfessor = `-- name: CreateProfessor :one
insert into "professors" (
  department,
  user_id
) values ($1, $2) returning professor_id
`

type CreateProfessorParams struct {
	Department string        `json:"department"`
	UserID     uuid.NullUUID `json:"user_id"`
}

func (q *Queries) CreateProfessor(ctx context.Context, arg CreateProfessorParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createProfessor, arg.Department, arg.UserID)
	var professor_id uuid.UUID
	err := row.Scan(&professor_id)
	return professor_id, err
}

const findProfessorByID = `-- name: FindProfessorByID :one
select (professor_id, department, user_id) 
from "professors"
where professor_id = $1 limit 1
`

func (q *Queries) FindProfessorByID(ctx context.Context, professorID uuid.UUID) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, findProfessorByID, professorID)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}

const findProfessorByUserID = `-- name: FindProfessorByUserID :one
select (professor_id, department, user_id) 
from "professors"
where user_id = $1 limit 1
`

func (q *Queries) FindProfessorByUserID(ctx context.Context, userID uuid.NullUUID) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, findProfessorByUserID, userID)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}

const updateProfessor = `-- name: UpdateProfessor :one
update "professors"
set department = $1 
where professor_id = $2 returning professor_id, department, user_id, created_at
`

type UpdateProfessorParams struct {
	Department  string    `json:"department"`
	ProfessorID uuid.UUID `json:"professor_id"`
}

func (q *Queries) UpdateProfessor(ctx context.Context, arg UpdateProfessorParams) (Professor, error) {
	row := q.db.QueryRowContext(ctx, updateProfessor, arg.Department, arg.ProfessorID)
	var i Professor
	err := row.Scan(
		&i.ProfessorID,
		&i.Department,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}
