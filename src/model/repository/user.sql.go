// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: user.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
insert into "users" (
  email, 
  name, 
  password, 
  role, 
  admin, 
  is_active, 
  institution_id
) values (
  $1, $2, $3, $4, $5, $6, $7
) returning user_id
`

type CreateUserParams struct {
	Email         string         `json:"email"`
	Name          sql.NullString `json:"name"`
	Password      string         `json:"password"`
	Role          string         `json:"role"`
	Admin         bool           `json:"admin"`
	IsActive      bool           `json:"is_active"`
	InstitutionID uuid.NullUUID  `json:"institution_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Name,
		arg.Password,
		arg.Role,
		arg.Admin,
		arg.IsActive,
		arg.InstitutionID,
	)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const getUserByID = `-- name: GetUserByID :one
select (
  email, 
  name, 
  password, 
  role, 
  admin, 
  is_active, 
  institution_id
) from "users" where user_id == $1 limit 1
`

func (q *Queries) GetUserByID(ctx context.Context, userID uuid.UUID) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, userID)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}
